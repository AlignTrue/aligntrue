{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://aligntrue.com/schema/config-v1.schema.json",
  "title": "AlignTrue Config v1",
  "description": "Configuration schema for AlignTrue CLI (solo/team/enterprise modes)",
  "type": "object",
  "required": [],
  "additionalProperties": true,
  "properties": {
    "version": {
      "type": "string",
      "description": "Config version identifier (e.g., '1' or semver '1.0.0')"
    },
    "mode": {
      "type": "string",
      "enum": ["solo", "team", "enterprise"],
      "description": "Operating mode: solo (default, no lockfile), team (lockfile+bundle), enterprise (all features)"
    },
    "modules": {
      "type": "object",
      "description": "Module feature flags (opt-in per module)",
      "additionalProperties": false,
      "properties": {
        "lockfile": {
          "type": "boolean",
          "description": "Enable lockfile generation for reproducibility (auto-enabled in team mode)"
        },
        "bundle": {
          "type": "boolean",
          "description": "Enable bundle generation for multi-source merging (auto-enabled in team mode)"
        },
        "checks": {
          "type": "boolean",
          "description": "Enable machine-checkable rules engine (default: true)"
        },
        "mcp": {
          "type": "boolean",
          "description": "Enable MCP server for editor integration (Phase 2+)"
        }
      }
    },
    "lockfile": {
      "type": "object",
      "description": "Lockfile-specific configuration",
      "additionalProperties": false,
      "properties": {
        "mode": {
          "type": "string",
          "enum": ["off", "soft", "strict"],
          "description": "Lockfile validation mode: off (no validation), soft (warn on mismatch), strict (error on mismatch)"
        }
      }
    },
    "git": {
      "type": "object",
      "description": "Git integration settings",
      "additionalProperties": false,
      "properties": {
        "mode": {
          "type": "string",
          "enum": ["ignore", "commit", "branch"],
          "description": "Git integration mode: ignore (no tracking), commit (auto-commit), branch (dedicated branch)"
        },
        "per_adapter": {
          "type": "object",
          "description": "Override git mode per exporter adapter",
          "additionalProperties": {
            "type": "string",
            "enum": ["ignore", "commit", "branch"]
          }
        }
      }
    },
    "sync": {
      "type": "object",
      "description": "Sync behavior configuration",
      "additionalProperties": false,
      "properties": {
        "auto_pull": {
          "type": "boolean",
          "description": "Automatically pull changes from primary agent on sync (default: true for solo, false for team)"
        },
        "primary_agent": {
          "type": "string",
          "description": "Primary agent to auto-pull from (e.g., 'cursor', 'copilot')"
        },
        "on_conflict": {
          "type": "string",
          "enum": ["prompt", "keep_ir", "accept_agent"],
          "description": "Conflict resolution strategy: prompt (interactive), keep_ir (default), accept_agent (auto-accept)"
        }
      }
    },
    "sources": {
      "type": "array",
      "description": "Source providers for rules (local files, catalog, git repos, URLs)",
      "items": {
        "type": "object",
        "required": ["type"],
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "enum": ["local", "catalog", "git", "url"],
            "description": "Source provider type"
          },
          "path": {
            "type": "string",
            "description": "Local file path (required for type: local)"
          },
          "url": {
            "type": "string",
            "description": "Remote URL (required for type: git or url)"
          },
          "id": {
            "type": "string",
            "description": "Catalog pack ID (required for type: catalog)"
          },
          "version": {
            "type": "string",
            "description": "Version constraint for catalog packs (e.g., '^1.0.0')"
          }
        }
      }
    },
    "exporters": {
      "type": "array",
      "description": "List of exporter adapters to generate (e.g., 'cursor', 'agents-md')",
      "items": {
        "type": "string",
        "minLength": 1
      }
    },
    "scopes": {
      "type": "array",
      "description": "Hierarchical scopes for monorepo path-based rule application",
      "items": {
        "type": "object",
        "required": ["path"],
        "additionalProperties": false,
        "properties": {
          "path": {
            "type": "string",
            "description": "Relative path from workspace root (e.g., 'packages/frontend')"
          },
          "include": {
            "type": "array",
            "description": "Glob patterns to include within this scope",
            "items": {
              "type": "string"
            }
          },
          "exclude": {
            "type": "array",
            "description": "Glob patterns to exclude from this scope",
            "items": {
              "type": "string"
            }
          },
          "rulesets": {
            "type": "array",
            "description": "Rule IDs or pack references to apply in this scope",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "merge": {
      "type": "object",
      "description": "Merge strategy configuration for multi-source rules",
      "additionalProperties": false,
      "properties": {
        "strategy": {
          "type": "string",
          "enum": ["deep"],
          "description": "Merge strategy: deep (property-level merge by rule ID)"
        },
        "order": {
          "type": "array",
          "description": "Merge order (precedence): root < path < local",
          "items": {
            "type": "string",
            "enum": ["root", "path", "local"]
          },
          "uniqueItems": true
        }
      }
    },
    "performance": {
      "type": "object",
      "description": "Performance guardrails and resource limits",
      "additionalProperties": false,
      "properties": {
        "max_file_size_mb": {
          "type": "number",
          "minimum": 1,
          "maximum": 1000,
          "description": "Maximum file size in MB for source files (default: 10MB)"
        },
        "max_directory_depth": {
          "type": "number",
          "minimum": 1,
          "maximum": 50,
          "description": "Maximum directory depth for scanning (default: 10 levels)"
        },
        "ignore_patterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Additional ignore patterns beyond .gitignore (glob format)"
        }
      }
    },
    "export": {
      "type": "object",
      "description": "Export behavior configuration for mode hints and token caps",
      "additionalProperties": true,
      "properties": {
        "mode_hints": {
          "type": "object",
          "description": "Control how execution mode metadata is exported to non-Cursor formats",
          "additionalProperties": false,
          "properties": {
            "default": {
              "type": "string",
              "enum": ["off", "metadata_only", "hints", "native"],
              "description": "Default mode hints behavior: off (no markers), metadata_only (JSON markers only), hints (markers + visible intent), native (exporter-specific)"
            },
            "overrides": {
              "type": "object",
              "description": "Per-exporter overrides for mode hints behavior",
              "additionalProperties": {
                "type": "string",
                "enum": ["off", "metadata_only", "hints", "native"]
              }
            }
          }
        },
        "max_hint_blocks": {
          "type": "number",
          "minimum": 1,
          "description": "Maximum number of rules to include mode hints for (default: 20)"
        },
        "max_hint_tokens": {
          "type": "number",
          "minimum": 100,
          "description": "Maximum token budget for mode hints across all rules (default: 1600)"
        }
      }
    },
    "backup": {
      "type": "object",
      "description": "Backup and restore configuration",
      "additionalProperties": false,
      "properties": {
        "auto_backup": {
          "type": "boolean",
          "description": "Automatically create backup before destructive operations (default: false)"
        },
        "keep_count": {
          "type": "number",
          "description": "Number of backups to keep (older backups auto-deleted, default: 10)",
          "minimum": 1,
          "maximum": 100
        },
        "backup_on": {
          "type": "array",
          "description": "Commands that trigger auto-backup (default: ['sync'])",
          "items": {
            "type": "string",
            "enum": ["sync", "restore", "import"]
          }
        }
      }
    },
    "overlays": {
      "type": "object",
      "description": "Overlay configuration for declarative customization of upstream rules (Phase 3.5)",
      "additionalProperties": false,
      "properties": {
        "overrides": {
          "type": "array",
          "description": "List of overlay definitions to apply to upstream rules",
          "items": {
            "type": "object",
            "required": ["selector"],
            "additionalProperties": false,
            "properties": {
              "selector": {
                "type": "string",
                "description": "Deterministic selector targeting exactly one rule (e.g., 'rule[id=...]')",
                "minLength": 1
              },
              "set": {
                "type": "object",
                "description": "Key-value pairs to set (supports nested paths with dot notation)",
                "additionalProperties": true
              },
              "remove": {
                "type": "array",
                "description": "List of keys to remove (supports nested paths with dot notation)",
                "items": {
                  "type": "string",
                  "minLength": 1
                }
              }
            }
          }
        },
        "limits": {
          "type": "object",
          "description": "Size limits for overlay configuration",
          "additionalProperties": false,
          "properties": {
            "max_overrides": {
              "type": "number",
              "minimum": 1,
              "maximum": 200,
              "description": "Maximum number of overrides allowed (default: 50)"
            },
            "max_operations_per_override": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "Maximum combined set+remove operations per override (default: 20)"
            }
          }
        }
      }
    }
  }
}
