/**
 * Aider Config exporter
 * Exports AlignTrue rules to Aider .aider.conf.yml format
 */

import { join } from "path";
import * as yaml from "js-yaml";
import type {
  ScopedExportRequest,
  ExportOptions,
  ExportResult,
  ResolvedScope,
} from "../types.js";
import type { AlignRule } from "@aligntrue/schema";
import { computeContentHash } from "@aligntrue/schema";
import { ExporterBase } from "../base/index.js";

interface ExporterState {
  allRules: Array<{ rule: AlignRule; scopePath: string }>;
}

export class AiderConfigExporter extends ExporterBase {
  name = "aider-config";
  version = "1.0.0";

  private state: ExporterState = {
    allRules: [],
  };

  async export(
    request: ScopedExportRequest,
    options: ExportOptions,
  ): Promise<ExportResult> {
    const { scope, rules } = request;
    const { outputDir, dryRun = false } = options;

    if (!rules || rules.length === 0) {
      return {
        success: true,
        filesWritten: [],
        contentHash: "",
      };
    }

    const scopePath = this.formatScopePath(scope);
    rules.forEach((rule) => {
      this.state.allRules.push({ rule, scopePath });
    });

    const outputPath = join(outputDir, ".aider.conf.yml");
    const content = this.generateAiderConfigContent(options);

    const allRulesIR = this.state.allRules.map(({ rule }) => rule);
    const contentHash = computeContentHash({ rules: allRulesIR });

    const fidelityNotes = this.computeFidelityNotes(allRulesIR);

    const filesWritten = await this.writeFile(outputPath, content, dryRun);

    const result = this.buildResult(filesWritten, contentHash, fidelityNotes);

    if (
      options.unresolvedPlugsCount !== undefined &&
      options.unresolvedPlugsCount > 0
    ) {
      result.unresolvedPlugs = options.unresolvedPlugsCount;
    }

    return result;
  }

  resetState(): void {
    this.state = {
      allRules: [],
    };
  }

  private formatScopePath(scope: ResolvedScope): string {
    if (scope.isDefault || scope.path === "." || scope.path === "") {
      return "all files";
    }
    return scope.path;
  }

  private generateAiderConfigContent(options: ExportOptions): string {
    const rules = this.state.allRules.map(({ rule, scopePath }) => ({
      id: rule.id,
      severity: rule.severity,
      scope: scopePath,
      guidance: rule.guidance || "",
      applies_to: rule.applies_to || [],
    }));

    const allRulesIR = this.state.allRules.map(({ rule }) => rule);
    const contentHash = computeContentHash({ rules: allRulesIR });
    const fidelityNotes = this.computeFidelityNotes(allRulesIR);

    const config: {
      version: string;
      generated_by: string;
      content_hash: string;
      rules: Array<{
        id: string;
        severity: "error" | "warn" | "info";
        scope: string;
        guidance: string;
        applies_to: string[];
      }>;
      fidelity_notes?: string[];
      unresolved_plugs?: number;
    } = {
      version: "v1",
      generated_by: "AlignTrue",
      content_hash: contentHash,
      rules,
    };

    if (
      options.unresolvedPlugsCount !== undefined &&
      options.unresolvedPlugsCount > 0
    ) {
      config.unresolved_plugs = options.unresolvedPlugsCount;
    }

    if (fidelityNotes.length > 0) {
      config.fidelity_notes = fidelityNotes;
    }

    const yamlContent = yaml.dump(config, {
      indent: 2,
      lineWidth: 120,
      noRefs: true,
    });

    return `# Aider Configuration\n# Generated by AlignTrue\n\n${yamlContent}`;
  }

  protected computeFidelityNotes(rules: AlignRule[]): string[] {
    const notes: string[] = [];
    const unmappedFields = new Set<string>();
    const vendorFields = new Set<string>();

    rules.forEach((rule) => {
      if (rule.check) {
        unmappedFields.add("check");
      }
      if (rule.autofix) {
        unmappedFields.add("autofix");
      }
      if (rule.vendor) {
        Object.keys(rule.vendor).forEach((agent) => {
          if (agent !== "aider" && agent !== "_meta") {
            vendorFields.add(agent);
          }
        });
      }
    });

    if (unmappedFields.has("check")) {
      notes.push(
        "Machine-checkable rules (check) not represented in .aider.conf.yml format",
      );
    }
    if (unmappedFields.has("autofix")) {
      notes.push("Autofix hints not represented in .aider.conf.yml format");
    }
    if (vendorFields.size > 0) {
      const agents = Array.from(vendorFields).sort().join(", ");
      notes.push(
        `Vendor metadata for agents preserved but not extracted: ${agents}`,
      );
    }

    return notes;
  }
}

export default AiderConfigExporter;
