/**
 * Cline exporter
 * Exports AlignTrue rules to Cline .clinerules format
 */

import { join } from 'path'
import type { ExporterPlugin, ScopedExportRequest, ExportOptions, ExportResult, ResolvedScope } from '../types.js'
import type { AlignRule } from '@aligntrue/schema'
import { canonicalizeJson, computeHash } from '@aligntrue/schema'
import { AtomicFileWriter } from '@aligntrue/file-utils'

interface ExporterState {
  allRules: Array<{ rule: AlignRule; scopePath: string }>
}

export class ClineExporter implements ExporterPlugin {
  name = 'cline'
  version = '1.0.0'
  
  private state: ExporterState = {
    allRules: [],
  }

  async export(request: ScopedExportRequest, options: ExportOptions): Promise<ExportResult> {
    const { scope, rules } = request
    const { outputDir, dryRun = false } = options

    if (!rules || rules.length === 0) {
      return {
        success: true,
        filesWritten: [],
        contentHash: '',
      }
    }

    const scopePath = this.formatScopePath(scope)
    rules.forEach(rule => {
      this.state.allRules.push({ rule, scopePath })
    })

    const outputPath = join(outputDir, '.clinerules')
    const content = this.generateClineRulesContent()
    
    const allRulesIR = this.state.allRules.map(({ rule }) => rule)
    const irContent = JSON.stringify({ rules: allRulesIR })
    const contentHash = computeHash(canonicalizeJson(irContent))
    
    const fidelityNotes = this.computeFidelityNotes(allRulesIR)
    
    if (!dryRun) {
      const writer = new AtomicFileWriter()
      writer.write(outputPath, content)
    }

    const result: ExportResult = {
      success: true,
      filesWritten: dryRun ? [] : [outputPath],
      contentHash,
    }

    if (fidelityNotes.length > 0) {
      result.fidelityNotes = fidelityNotes
    }

    return result
  }

  resetState(): void {
    this.state = {
      allRules: [],
    }
  }

  private formatScopePath(scope: ResolvedScope): string {
    if (scope.isDefault || scope.path === '.' || scope.path === '') {
      return 'all files'
    }
    return scope.path
  }

  private generateClineRulesContent(): string {
    const lines: string[] = []
    
    lines.push('# Cline Rules')
    lines.push('# Generated by AlignTrue')
    lines.push('')

    this.state.allRules.forEach(({ rule, scopePath }) => {
      lines.push(`# Rule: ${rule.id}`)
      lines.push(`# Severity: ${rule.severity.toUpperCase()}`)
      if (scopePath) {
        lines.push(`# Scope: ${scopePath}`)
      }
      lines.push('')
      if (rule.guidance) {
        rule.guidance.trim().split('\n').forEach(line => {
          lines.push(line)
        })
        lines.push('')
      }
      lines.push('---')
      lines.push('')
    })

    const allRulesIR = this.state.allRules.map(({ rule }) => rule)
    const irContent = JSON.stringify({ rules: allRulesIR })
    const contentHash = computeHash(canonicalizeJson(irContent))

    lines.push(`# Content Hash: ${contentHash}`)

    return lines.join('\n')
  }

  private computeFidelityNotes(rules: AlignRule[]): string[] {
    const notes: string[] = []
    const unmappedFields = new Set<string>()

    rules.forEach(rule => {
      if (rule.check) {
        unmappedFields.add('check')
      }
      if (rule.autofix) {
        unmappedFields.add('autofix')
      }
    })

    if (unmappedFields.has('check')) {
      notes.push('Machine-checkable rules (check) not represented in .clinerules format')
    }
    if (unmappedFields.has('autofix')) {
      notes.push('Autofix hints not represented in .clinerules format')
    }

    return notes
  }
}

export default ClineExporter

