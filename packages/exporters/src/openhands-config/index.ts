/**
 * Open Hands Config exporter
 * Exports AlignTrue rules to config.toml format
 * 
 * Note: Currently exports as basic TOML. May require refinement.
 */

import { join } from 'path'
import type { ExporterPlugin, ScopedExportRequest, ExportOptions, ExportResult } from '../types.js'
import type { AlignRule } from '@aligntrue/schema'
import { canonicalizeJson, computeHash } from '@aligntrue/schema'
import { AtomicFileWriter } from '@aligntrue/core'

interface ExporterState {
  allRules: Array<{ rule: AlignRule; scopePath: string }>
}

export class OpenHandsConfigExporter implements ExporterPlugin {
  name = 'openhands-config'
  version = '1.0.0'
  
  private state: ExporterState = {
    allRules: [],
  }

  async export(request: ScopedExportRequest, options: ExportOptions): Promise<ExportResult> {
    const { scope, rules } = request
    const { outputDir, dryRun = false } = options

    if (!rules || rules.length === 0) {
      return { success: true, filesWritten: [], contentHash: '' }
    }

    const scopePath = (scope.isDefault || scope.path === '.' || scope.path === '') ? 'all files' : scope.path
    rules.forEach(rule => this.state.allRules.push({ rule, scopePath }))

    const outputPath = join(outputDir, 'config.toml')
    
    // Simple TOML-like format
    const content = this.generateTomlContent()
    const contentHash = computeHash(canonicalizeJson(JSON.stringify({ rules: this.state.allRules.map(({ rule }) => rule) })))
    
    if (!dryRun) {
      new AtomicFileWriter().write(outputPath, content)
    }

    return { success: true, filesWritten: dryRun ? [] : [outputPath], contentHash }
  }

  private generateTomlContent(): string {
    const lines: string[] = []
    
    lines.push('# Open Hands Configuration')
    lines.push('# Generated by AlignTrue')
    lines.push('')
    lines.push('[config]')
    lines.push('version = "v1"')
    lines.push('generated_by = "AlignTrue"')
    lines.push('')
    
    this.state.allRules.forEach(({ rule, scopePath }) => {
      lines.push(`[[rules]]`)
      lines.push(`id = "${rule.id}"`)
      lines.push(`severity = "${rule.severity}"`)
      lines.push(`guidance = "${(rule.guidance || '').replace(/"/g, '\\"').replace(/\n/g, '\\n')}"`)
      lines.push(`scope = "${scopePath}"`)
      if (rule.applies_to && rule.applies_to.length > 0) {
        lines.push(`applies_to = [${rule.applies_to.map(p => `"${p}"`).join(', ')}]`)
      }
      lines.push('')
    })

    return lines.join('\n')
  }

  resetState(): void {
    this.state = { allRules: [] }
  }
}

export default OpenHandsConfigExporter

