/**
 * Kilo Code exporter
 * Exports AlignTrue rules to Kilo Code .kilocode/rules/ directory format
 */

import { join } from "path";
import type {
  ExporterPlugin,
  ScopedExportRequest,
  ExportOptions,
  ExportResult,
  ResolvedScope,
} from "../types.js";
import type { AlignRule } from "@aligntrue/schema";
import { computeContentHash } from "@aligntrue/schema";
import { AtomicFileWriter } from "@aligntrue/file-utils";
import { ExporterBase } from "../base/index.js";
import {
  extractModeConfig,
  applyRulePrioritization,
  generateSessionPreface,
  wrapRuleWithMarkers,
  shouldIncludeRule,
} from "../utils/index.js";

export class KiloCodeExporter extends ExporterBase {
  name = "kilocode";
  version = "1.0.0";

  async export(
    request: ScopedExportRequest,
    options: ExportOptions,
  ): Promise<ExportResult> {
    const { scope, rules } = request;
    const { outputDir, dryRun = false, config } = options;

    if (!rules || rules.length === 0) {
      throw new Error("KiloCodeExporter requires at least one rule to export");
    }

    const filename = this.getScopeFilename(scope);
    const outputPath = join(outputDir, ".kilocode", "rules", filename);

    const { modeHints, maxBlocks, maxTokens } = extractModeConfig(
      this.name,
      config,
    );
    const { content, warnings } = this.generateRuleContent(
      scope,
      rules,
      modeHints,
      maxBlocks,
      maxTokens,
      options.unresolvedPlugsCount,
    );

    const contentHash = computeContentHash({ scope, rules });

    const fidelityNotes = this.computeFidelityNotes(rules);

    const filesWritten = await this.writeFile(outputPath, content, dryRun);

    const result = this.buildResult(filesWritten, contentHash, fidelityNotes);

    if (warnings.length > 0) {
      result.warnings = warnings;
    }

    return result;
  }

  private getScopeFilename(scope: ResolvedScope): string {
    if (scope.isDefault || scope.path === "." || scope.path === "") {
      return "rules.md";
    }

    const normalized = scope.normalizedPath.replace(/\//g, "-");
    return `${normalized}.md`;
  }

  private generateRuleContent(
    scope: ResolvedScope,
    rules: AlignRule[],
    modeHints: string,
    maxBlocks: number,
    maxTokens: number,
    unresolvedPlugs?: number,
  ): { content: string; warnings: string[] } {
    const lines: string[] = [];

    const scopeDesc = scope.isDefault
      ? "Kilo Code rules (default scope)"
      : `Kilo Code rules for ${scope.path}`;
    lines.push(`# ${scopeDesc}`);

    // Add session preface if needed
    lines.push(...generateSessionPreface(modeHints));

    // Apply prioritization
    const { includedIds, warnings } = applyRulePrioritization(
      rules,
      modeHints,
      maxBlocks,
      maxTokens,
    );

    // Generate rule sections
    rules.forEach((rule) => {
      if (!shouldIncludeRule(rule.id, includedIds)) {
        return;
      }

      // Build rule content
      const ruleLines: string[] = [];
      ruleLines.push(`## Rule: ${rule.id}`);
      ruleLines.push("");
      ruleLines.push(`**Severity:** ${rule.severity}`);
      ruleLines.push("");

      if (rule.applies_to && rule.applies_to.length > 0) {
        ruleLines.push(`**Applies to:**`);
        rule.applies_to.forEach((pattern) => {
          ruleLines.push(`- \`${pattern}\``);
        });
        ruleLines.push("");
      }

      if (rule.guidance) {
        ruleLines.push(rule.guidance.trim());
        ruleLines.push("");
      }
      ruleLines.push("---");

      // Wrap with markers and add to output
      const ruleContent = ruleLines.join("\n");
      lines.push(wrapRuleWithMarkers(rule, ruleContent, modeHints));
      lines.push("");
    });

    const contentHash = computeContentHash({ scope, rules });
    const fidelityNotes = this.computeFidelityNotes(rules);

    lines.push("**Generated by AlignTrue**");
    lines.push(`Content Hash: ${contentHash}`);

    if (unresolvedPlugs !== undefined && unresolvedPlugs > 0) {
      lines.push(`Unresolved Plugs: ${unresolvedPlugs}`);
    }

    if (fidelityNotes.length > 0) {
      lines.push("");
      lines.push("**Fidelity Notes:**");
      fidelityNotes.forEach((note) => {
        lines.push(`- ${note}`);
      });
    }

    lines.push("");
    return { content: lines.join("\n"), warnings };
  }

  override computeFidelityNotes(rules: AlignRule[]): string[] {
    const notes: string[] = [];
    const unmappedFields = new Set<string>();

    rules.forEach((rule) => {
      if (rule.check) {
        unmappedFields.add("check");
      }
      if (rule.autofix) {
        unmappedFields.add("autofix");
      }
    });

    if (unmappedFields.has("check")) {
      notes.push(
        "Machine-checkable rules (check) not represented in .kilocode/rules/ format",
      );
    }
    if (unmappedFields.has("autofix")) {
      notes.push("Autofix hints not represented in .kilocode/rules/ format");
    }

    notes.push(
      "applies_to patterns preserved in metadata but not enforced by Kilo Code",
    );

    return notes;
  }
}

export default KiloCodeExporter;
