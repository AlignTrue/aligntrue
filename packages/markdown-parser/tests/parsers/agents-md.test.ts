/**
 * Tests for AGENTS.md parser
 */

import { describe, it, expect } from 'vitest'
import { parseAgentsMd } from '../../src/parsers/agents-md.js'

describe('parseAgentsMd', () => {
  it('should parse basic rule', () => {
    const content = `# AGENTS.md

**Version:** v1

## Rule: test-rule

**ID:** test-rule
**Severity:** ERROR
**Scope:** **/*.ts, **/*.tsx

This is the guidance text.
---
`

    const { rules, version } = parseAgentsMd(content)
    
    expect(version).toBe('1')
    expect(rules).toHaveLength(1)
    expect(rules[0]).toMatchObject({
      id: 'test-rule',
      severity: 'error',
      applies_to: ['**/*.ts', '**/*.tsx'],
      guidance: 'This is the guidance text.',
    })
  })

  it('should map severity from ERROR/WARN/INFO to error/warn/info', () => {
    const content = `# AGENTS.md

## Rule: rule-one

**ID:** rule-one
**Severity:** ERROR

Test.
---

## Rule: rule-two

**ID:** rule-two
**Severity:** WARN

Test.
---

## Rule: rule-three

**ID:** rule-three
**Severity:** INFO

Test.
---
`

    const { rules } = parseAgentsMd(content)
    
    expect(rules).toHaveLength(3)
    expect(rules[0].severity).toBe('error')
    expect(rules[1].severity).toBe('warn')
    expect(rules[2].severity).toBe('info')
  })

  it('should use rule name as ID if ID field missing', () => {
    const content = `# AGENTS.md

## Rule: fallback-name

**Severity:** ERROR

Test.
---
`

    const { rules } = parseAgentsMd(content)
    
    expect(rules[0].id).toBe('fallback-name')
  })

  it('should default applies_to to **/* if scope missing', () => {
    const content = `# AGENTS.md

## Rule: no-scope

**ID:** no-scope
**Severity:** WARN

Test.
---
`

    const { rules } = parseAgentsMd(content)
    
    expect(rules[0].applies_to).toEqual(['**/*'])
  })

  it('should parse multiple rules', () => {
    const content = `# AGENTS.md

## Rule: rule-one

**ID:** rule-one
**Severity:** ERROR
**Scope:** *.ts

First.
---

## Rule: rule-two

**ID:** rule-two
**Severity:** WARN
**Scope:** *.js

Second.
---
`

    const { rules } = parseAgentsMd(content)
    
    expect(rules).toHaveLength(2)
    expect(rules[0].id).toBe('rule-one')
    expect(rules[1].id).toBe('rule-two')
  })

  it('should handle multiline guidance', () => {
    const content = `# AGENTS.md

## Rule: multiline

**ID:** multiline
**Severity:** INFO

Line one.
Line two.

New paragraph.
---
`

    const { rules } = parseAgentsMd(content)
    
    expect(rules[0].guidance).toContain('Line one')
    expect(rules[0].guidance).toContain('Line two')
    expect(rules[0].guidance).toContain('New paragraph')
  })

  it('should handle missing severity gracefully', () => {
    const content = `# AGENTS.md

## Rule: no-severity

**ID:** no-severity

Test.
---
`

    const { rules } = parseAgentsMd(content)
    
    expect(rules).toHaveLength(0)  // Should skip invalid rule
  })

  it('should parse real golden repo format', () => {
    const content = `# AGENTS.md

**Version:** v1
**Generated by:** AlignTrue

This file contains rules and guidance for AI coding agents.

## Rule: testing-require-tests

**ID:** testing-require-tests
**Severity:** ERROR
**Scope:** src/**/*.ts, src/**/*.tsx

Every new feature must include unit tests. Test files should be co-located
with source files using the .test.ts or .spec.ts naming convention.

Examples:
- src/utils/parser.ts → src/utils/parser.test.ts
- src/components/Button.tsx → src/components/Button.test.tsx
---

## Rule: code-review-no-todos

**ID:** code-review-no-todos
**Severity:** WARN
**Scope:** **/*.ts, **/*.tsx, **/*.js, **/*.jsx

TODO comments should be converted to GitHub issues before merging.
They often get forgotten in the codebase.

Instead of: // TODO: refactor this
Do: Create issue, then // Issue #123: refactor this
---

**Generated by AlignTrue**
Content Hash: abc123
`

    const { rules, version } = parseAgentsMd(content)
    
    expect(version).toBe('1')
    expect(rules).toHaveLength(2)
    
    expect(rules[0]).toMatchObject({
      id: 'testing-require-tests',
      severity: 'error',
      applies_to: ['src/**/*.ts', 'src/**/*.tsx'],
    })
    expect(rules[0].guidance).toContain('unit tests')
    
    expect(rules[1]).toMatchObject({
      id: 'code-review-no-todos',
      severity: 'warn',
      applies_to: ['**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx'],
    })
    expect(rules[1].guidance).toContain('TODO comments')
  })

  it('should handle footer markers gracefully', () => {
    const content = `# AGENTS.md

## Rule: test

**ID:** test
**Severity:** ERROR

Guidance.
---

**Generated by AlignTrue**
Content Hash: xyz
`

    const { rules } = parseAgentsMd(content)
    
    expect(rules).toHaveLength(1)
    expect(rules[0].guidance).not.toContain('Generated by')
    expect(rules[0].guidance).not.toContain('Content Hash')
  })

  it('should parse without version', () => {
    const content = `# AGENTS.md

## Rule: test

**ID:** test
**Severity:** ERROR

Test.
---
`

    const { rules, version } = parseAgentsMd(content)
    
    expect(version).toBeUndefined()
    expect(rules).toHaveLength(1)
  })
})

