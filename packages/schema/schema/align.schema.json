{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://aligntrue.ai/schema/align-v1.schema.json",
  "title": "Align Pack v1",
  "description": "Schema for AlignTrue Align packs (Spec v1, CLI-first)",
  "type": "object",
  "required": ["id", "version", "spec_version", "rules"],
  "properties": {
    "id": {
      "type": "string",
      "description": "Pack identifier. Solo mode: simple names (e.g., 'my-rules'). Team mode: project-scoped (e.g., 'mycompany/backend'). Catalog mode: pack namespacing (e.g., 'packs/mycompany/backend')."
    },
    "version": {
      "type": "string",
      "pattern": "^\\d+\\.\\d+\\.\\d+(-[a-z0-9.-]+)?(\\+[a-z0-9.-]+)?$",
      "description": "Semantic version (MAJOR.MINOR.PATCH)"
    },
    "spec_version": {
      "type": "string",
      "const": "1",
      "description": "Align Spec version identifier"
    },
    "source_format": {
      "type": "string",
      "enum": ["markdown", "yaml"],
      "description": "Source format of the align document. Optional metadata field for tracking authoring method."
    },
    "summary": {
      "type": "string",
      "maxLength": 200,
      "description": "One-line description. Optional in solo mode, required in team/catalog modes."
    },
    "owner": {
      "type": "string",
      "description": "Owner identifier (e.g., 'mycompany/platform' or 'john-smith'). Required in team/catalog modes."
    },
    "source": {
      "type": "string",
      "description": "Source repository URL or identifier (e.g., 'github.com/mycompany/rules'). Required in team/catalog modes."
    },
    "source_sha": {
      "type": "string",
      "description": "Git commit SHA or content hash for reproducibility. Required in team/catalog modes."
    },
    "tags": {
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "^[a-z0-9-]+$"
      },
      "description": "Categorization tags (catalog mode, Phase 4)"
    },
    "deps": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Pack dependencies with optional version constraints (catalog mode, Phase 4)"
    },
    "scope": {
      "type": "object",
      "properties": {
        "applies_to": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "description": "Contexts where this pack applies"
        },
        "includes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Glob patterns to include"
        },
        "excludes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Glob patterns to exclude"
        }
      },
      "description": "Scope definition (catalog mode, Phase 4)"
    },
    "rules": {
      "type": "array",
      "minItems": 1,
      "items": {
        "$ref": "#/$defs/rule"
      }
    },
    "integrity": {
      "type": "object",
      "required": ["algo", "value"],
      "properties": {
        "algo": {
          "type": "string",
          "enum": ["jcs-sha256"]
        },
        "value": {
          "type": "string",
          "pattern": "^([a-f0-9]{64}|<computed>|<pending>)$",
          "description": "Hex-encoded SHA-256 hash. Optional in solo mode, required in catalog mode."
        }
      }
    },
    "_markdown_meta": {
      "type": "object",
      "properties": {
        "original_structure": {
          "type": "string",
          "enum": ["single-block", "multi-rule"],
          "description": "Markdown structure used in source document"
        },
        "header_prefix": {
          "type": "string",
          "description": "Header text before fenced block (e.g., '# AlignTrue Rules')"
        },
        "guidance_position": {
          "type": "string",
          "enum": ["before-block", "in-doc"],
          "description": "Where document guidance was located in markdown"
        },
        "whitespace_style": {
          "type": "object",
          "properties": {
            "indent": {
              "type": "string",
              "enum": ["spaces", "tabs"]
            },
            "indent_size": {
              "type": "integer",
              "minimum": 1,
              "maximum": 8
            },
            "line_endings": {
              "type": "string",
              "enum": ["lf", "crlf"]
            }
          }
        }
      },
      "description": "Metadata for byte-identical markdown round-trip reconstruction (excluded from canonical hash)"
    },
    "plugs": {
      "type": "object",
      "properties": {
        "slots": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/plug_slot"
          },
          "description": "Slot declarations (base packs declare configurable values)"
        },
        "fills": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "minLength": 1,
            "description": "Non-empty single-line value"
          },
          "description": "Fill values (stack packs and repos provide concrete values)"
        }
      },
      "description": "Plugs v1.1: Stack-agnostic rule authoring with configurable slots and fills"
    }
  },
  "$defs": {
    "rule": {
      "type": "object",
      "required": ["id", "severity", "applies_to"],
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[a-z0-9]+(\\.[a-z0-9-]+){2,}$",
          "description": "Rule identifier with dot notation (min 3 segments): category.subcategory.rule-name"
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[a-z0-9]+(-[a-z0-9]+)*$"
          },
          "description": "Previous IDs for this rule (backwards compatibility after renames)"
        },
        "severity": {
          "type": "string",
          "enum": ["error", "warn", "info"],
          "description": "Severity level: error (blocking), warn (should fix), info (advisory)"
        },
        "applies_to": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "description": "Glob patterns defining which files this rule applies to"
        },
        "guidance": {
          "type": "string",
          "description": "Human-readable explanation in Markdown format"
        },
        "check": {
          "$ref": "#/$defs/check"
        },
        "autofix": {
          "$ref": "#/$defs/autofix"
        },
        "mode": {
          "type": "string",
          "enum": ["always", "manual", "intelligent", "files"],
          "description": "Execution mode: always (apply to all edits), manual (user selects), intelligent (relevance-based), files (glob-matched)"
        },
        "title": {
          "type": "string",
          "maxLength": 100,
          "description": "Optional display name for the rule"
        },
        "description": {
          "type": "string",
          "maxLength": 500,
          "description": "Description for intelligent mode relevance detection and user guidance. Persisted for all modes (some agents use it universally)."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[a-z0-9-]+$"
          },
          "description": "Categorization tags for filtering and organization"
        },
        "vendor": {
          "type": "object",
          "description": "Agent-specific metadata for lossless round-trips. Use _meta.volatile to exclude fields from hashing.",
          "additionalProperties": true
        }
      }
    },
    "check": {
      "type": "object",
      "required": ["type", "inputs"],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "file_presence",
            "path_convention",
            "manifest_policy",
            "regex",
            "command_runner"
          ]
        },
        "inputs": {
          "type": "object"
        },
        "evidence": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "file_presence"
              }
            }
          },
          "then": {
            "properties": {
              "inputs": {
                "type": "object",
                "required": ["paths"],
                "properties": {
                  "paths": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "path_convention"
              }
            }
          },
          "then": {
            "properties": {
              "inputs": {
                "type": "object",
                "required": ["include", "pattern"],
                "properties": {
                  "include": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1
                  },
                  "pattern": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "manifest_policy"
              }
            }
          },
          "then": {
            "properties": {
              "inputs": {
                "type": "object",
                "required": ["manifest", "lockfile"],
                "properties": {
                  "manifest": {
                    "type": "string"
                  },
                  "lockfile": {
                    "type": "string"
                  },
                  "require_pinned": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "regex"
              }
            }
          },
          "then": {
            "properties": {
              "inputs": {
                "type": "object",
                "required": ["include", "pattern", "allow"],
                "properties": {
                  "include": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1
                  },
                  "pattern": {
                    "type": "string"
                  },
                  "allow": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "command_runner"
              }
            }
          },
          "then": {
            "properties": {
              "inputs": {
                "type": "object",
                "required": ["command"],
                "properties": {
                  "command": {
                    "type": "string"
                  },
                  "working_dir": {
                    "type": "string"
                  },
                  "timeout_ms": {
                    "type": "number"
                  },
                  "expect_exit_code": {
                    "type": "number"
                  }
                }
              }
            }
          }
        }
      ]
    },
    "autofix": {
      "type": "object",
      "required": ["hint"],
      "properties": {
        "hint": {
          "type": "string",
          "description": "Human-readable hint for fixing the violation"
        }
      }
    },
    "plug_slot": {
      "type": "object",
      "required": ["description", "format", "required"],
      "properties": {
        "description": {
          "type": "string",
          "minLength": 1,
          "description": "One short sentence explaining what this plug is for"
        },
        "format": {
          "type": "string",
          "enum": ["command", "text", "file", "url"],
          "description": "Format validation type: command (no env vars except CI), text (any UTF-8), file (repo-relative), url (http/https)"
        },
        "required": {
          "type": "boolean",
          "description": "Whether this slot must be filled"
        },
        "example": {
          "type": "string",
          "minLength": 1,
          "description": "Single-line example (recommended for required slots)"
        }
      },
      "additionalProperties": false,
      "description": "Slot declaration in base packs"
    }
  }
}
