id: "packs/base/base-security"
version: "1.0.0"
profile: "align"
spec_version: "1"
summary: "Security and compliance: secrets, dependencies, supply chain, least privilege"
tags: ["security", "compliance", "secrets", "supply-chain", "paved-road"]
deps: []
scope:
  applies_to: ["*"]
  excludes: ["vendor/**", "third_party/**", "node_modules/**", "dist/**"]
rules:
  - id: "no-committed-secrets"
    severity: "MUST"
    check:
      type: "command_runner"
      inputs:
        command: "gitleaks detect --no-git --redact --source=."
        timeout_ms: 60000
        expect_exit_code: 0
      evidence: "Secrets found in repository"
    autofix:
      hint: "Remove secrets, add to .gitignore, rotate credentials, add regression check"

  - id: "require-lockfile"
    severity: "MUST"
    check:
      type: "file_presence"
      inputs:
        pattern: "{package-lock.json,pnpm-lock.yaml,yarn.lock,Cargo.lock,poetry.lock,Gemfile.lock}"
      evidence: "Missing dependency lockfile"
    autofix:
      hint: "Generate lockfile and commit it"

  - id: "audit-dependencies"
    severity: "MUST"
    check:
      type: "command_runner"
      inputs:
        command: "pnpm audit --audit-level=high"
        timeout_ms: 60000
        expect_exit_code: 0
      evidence: "High/critical dependency vulnerabilities found"
    autofix:
      hint: "Run pnpm audit fix or explicitly waive with tracked issue"

  - id: "no-floating-versions"
    severity: "MUST"
    check:
      type: "regex"
      inputs:
        include: ["package.json", "requirements.txt", "Cargo.toml"]
        pattern: "(\\^|~|\\*|latest)"
        allow: false
      evidence: "Floating dependency versions found"
    autofix:
      hint: "Pin exact versions or use lockfile-enforced ranges"

  - id: "env-example-exists"
    severity: "SHOULD"
    check:
      type: "file_presence"
      inputs:
        pattern: ".env.example"
      evidence: "Missing .env.example file"
    autofix:
      hint: "Create .env.example documenting required vars with placeholder values"

integrity:
  algo: "jcs-sha256"
  value: "6f12be11e39dff0f6a29b09c69eb17d7f944e3da6a4e75e03e833834162fff4b"

notes: |
  Priority: 2 (higher than most)
  Precedence: overrides global, testing, tdd; complements docs

guidance: |
  # Security and Compliance Baseline

  ## Core Principles

  - Never commit secrets (treat repo as public)
  - Control dependencies and registries
  - Enforce license compliance
  - Run static analysis (SAST)
  - Build with least privilege and provenance
  - Keep data and logs safe

  ## Secrets Management

  - Pre-commit and CI scans required
  - Store runtime secrets only in approved manager
  - If leaked: revoke, rotate, add regression check

  ## Supply Chain

  - Require lockfiles and pinned versions
  - No floating ranges in CI or production
  - Audit on every PR
  - Allow only approved registries
  - Schedule regular updates

  ## License Compliance

  - Check third-party licenses
  - Block disallowed or unknown licenses
  - Document exceptions

  ## SAST and Container Scanning

  - Execute SAST in CI (high findings blocking)
  - Scan containers if applicable
  - Use pinned base images

  ## Build Provenance

  - CI with least privilege
  - Generate SBOM for each release
  - Sign artifacts when enabled

  ## Data Safety

  - No production data in tests
  - Redact secrets/PII in logs
  - Follow data classification policy

  ## CI Gates

  - Block merge on scan failures
  - Surface reports as artifacts
  - Keep logs free of secrets
