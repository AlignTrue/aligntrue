id: "packs/base/base-tdd"
version: "1.0.0"
profile: "align"
spec_version: "1"
summary: "Test-Driven Development workflow: red, green, refactor"
tags: ["tdd", "testing", "workflow", "paved-road"]
deps: ["packs/base/base-global", "packs/base/base-testing"]
scope:
  applies_to: ["*"]
  includes: ["**/*.{ts,tsx,js,jsx,py,rs,go}"]
  excludes: ["vendor/**", "node_modules/**", "dist/**"]
rules:
  - id: "test-before-implementation"
    severity: "SHOULD"
    check:
      type: "command_runner"
      inputs:
        command: "git diff HEAD~1 --name-only | grep -E 'test|spec' | head -1 | xargs git log --format=%H -- | head -1 | xargs -I {} git diff {}~1 {} --name-only | grep -v -E 'test|spec' | wc -l | grep '^0$'"
        expect_exit_code: 0
      evidence: "Implementation committed before test"
    autofix:
      hint: "Write failing test first, then implement"

  - id: "tests-are-deterministic"
    severity: "MUST"
    check:
      type: "regex"
      inputs:
        include: ["**/*.{test,spec}.{ts,tsx,js,jsx,py}"]
        pattern: "(Math\\.random|Date\\.now|setTimeout|setInterval)"
        allow: false
      evidence: "Non-deterministic code in tests"
    autofix:
      hint: "Freeze time, seed randomness, stub I/O and network"

  - id: "minimal-changes-to-pass"
    severity: "SHOULD"
    check:
      type: "command_runner"
      inputs:
        command: "git diff HEAD~1 --stat | tail -1 | awk '{print $4}' | sed 's/[^0-9]//g' | awk '$1 > 100 {exit 1}'"
        expect_exit_code: 0
      evidence: "Large diff suggests non-minimal implementation"
    autofix:
      hint: "Implement only what the failing test demands"

integrity:
  algo: "jcs-sha256"
  value: "ec03a2350d7613611dc25495b9c26cfb2e5f6d672b6a4fc254278957cc31be22"

notes: |
  Precedence: complements global, testing, docs; defers to security

guidance: |
  # Test-Driven Development

  ## Core Workflow

  1. **Red**: Write failing test
  2. **Green**: Minimal change to pass
  3. **Refactor**: Improve with safety

  ## Red Phase

  - Pick one behavior
  - Define smallest observable contract
  - Place in correct test folder (unit/integration/e2e)
  - Assert outcomes, not implementation
  - Make it deterministic
  - Verify it fails for right reason

  ## Green Phase

  - Implement only what test demands
  - No preemptive features
  - Keep changes minimal
  - Prefer small pure functions
  - Re-run until green

  ## Refactor Phase

  - Improve names
  - Factor duplication
  - Clarify boundaries
  - Run fmt and lint
  - Ensure tests stay green

  ## Test Requirements

  - Fast and isolated
  - No sleep-based timing
  - Quarantine flakiness immediately
  - Fix quickly

  ## Commit Discipline

  - Order: red test, green change, refactor
  - Squash before merge if needed
  - PR must include test and docs

  ## CI Enforcement

  - CI runs tests
  - Block merge on failures
  - Enforce coverage if configured

  ## When in Doubt

  - Tighten the contract
  - Add regression test first for bugs
  - Specify inputs/outputs over mocks
